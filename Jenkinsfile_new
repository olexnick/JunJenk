pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps {
        // Checkout your source code from version control
        // Replace with your actual SCM configuration
        checkout scm
      }
    }

    stage('Build') {
      steps {
        // Build the Maven project
        sh 'mvn clean package'
      }
    }

    stage('MyTest') {
      steps {
        // Run JUnit tests using ConsoleLauncher
        sh 'java -jar junit-platform-console-standalone-1.7.0.jar \
            --classpath "target/classes:target/test-classes" \
            --scan-class-path'
      }
    }
  }
}


Apologies for the confusion in my previous response. You are correct that LauncherFactory is not a main class. Instead, it is a factory class used to create instances of the Launcher interface.

To execute JUnit tests using LauncherFactory, you need to provide the main class of the JUnit Platform Console Launcher, which is org.junit.platform.console.ConsoleLauncher. The ConsoleLauncher is responsible for running the tests and generating the test reports.

Here's an updated example of a Jenkins pipeline script (Jenkinsfile) that runs JUnit tests using ConsoleLauncher:
In this updated example:

The --classpath option specifies the classpath for the tests, including both the target/classes directory (for main classes) and the target/test-classes directory (for test classes) generated by Maven during the build process.
The --scan-class-path option instructs ConsoleLauncher to scan the classpath for test classes and execute them.
The path/to/junit-platform-console-standalone-1.7.0.jar should be replaced with the actual path to the JAR file of the JUnit Platform Console Standalone, considering your project's dependencies.
Make sure that the JUnit Platform Console Standalone JAR file is available at the specified location (path/to/junit-platform-console-standalone-1.7.0.jar) in your Jenkins environment.

Remember to adjust the paths, file locations, Maven goals, and other commands in the pipeline script based on your specific project structure and requirements.

Again, I apologize for the confusion caused in my previous response, and thank you for pointing it out.


java -jar junit-platform-console-standalone-1.7.0.jar \
    --classpath target/classes:target/test-classes \
    --scan-class-path \
    --include-engine=junit-jupiter \
    --include-classname=Suite.RunnerTest

    sh 'java -jar junit-platform-console-standalone-1.7.0.jar \
                --classpath target/classes:target/test-classes \
                --scan-class-path \
                --include-engine=junit-jupiter \
                --include-classname=Suite.RunnerTest


                java -jar junit-platform-console-standalone-1.7.0.jar \
                    --classpath target/classes:target/test-classes \
                    --include-engine=junit-jupiter \
                    --include-classname Suite.All.Page3Test \
                    --include-classname Suite.All.Page4Test \
                    --include-classname=Suite.RunnerTest

java -cp "junit-platform-engine-1.7.0.jar:junit-jupiter-engine-5.7.0.jar:JunJenk-1.0-SNAPSHOT.jar" TestRunner
java -cp "junit-platform-engine-1.7.0.jar:junit-jupiter-engine-5.7.0.jar:/Users/olexnick/Documents/ProjectsJAVA/Djooky/JunJenk/target/JunJenk-1.0-SNAPSHOT.jar" TestRunner
java -cp "junit-platform-engine-1.7.0.jar:junit-jupiter-engine-5.7.0.jar:/Users/olexnick/Documents/ProjectsJAVA/Djooky/JunJenk/target/JunJenk-1.0-SNAPSHOT.jar" src.test.java.Suite.RunnerTest.java

 javac -cp "junit-platform-console-standalone-1.7.0.jar" src/test/java/Suite/TestRunner_newTest.java src/test/java/Suite/All/Page3Test.java src/test/java/Suite/All/Page4Test.java